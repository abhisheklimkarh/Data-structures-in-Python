#   Binary Search Tree

class Node:
    '''Create a new node'''
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def insert(self, data):
        '''Inserting a new node'''
        if self.data:
            if data < self.data:
                if self.left is None:
                    self.left = Node(data)
                else:
                    self.left.insert(data)
            else:
                if self.right is None:
                    self.right = Node(data)
                else:
                    self.right.insert(data)
        else:
            self.data = data

    def find_val(self, data):
        '''Search Operation'''
        if data < self.data:
            if self.left is None:
                return str(data) + " Not Found"
            return self.left.find_val(data)
        elif data > self.data:
            if self.right is None:
                return str(data) + " Not Found"
            return self.right.find_val(data)
        else:
            return str(self.data) + " Found"

    def print_tree(self):
        '''Inorder Traversal'''
        if self.left:
            self.left.print_tree()
        print(self.data)
        if self.right:
            self.right.print_tree()


root = Node(12)

root.insert(6)
root.insert(25)
root.insert(9)
root.insert(18)

root.print_tree()
print("#"*30)
print(root.find_val(9))
print(root.find_val(15))

# OUTPUT:
#
# 6
# 9
# 12
# 18
# 25
# ##############################
# 9 Found
# 15 Not Found
